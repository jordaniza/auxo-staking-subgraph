# AUTOGENERATED USING build.sh DO NOT EDIT THIS VERSION
"""
Links all our contracts to individual ethereum accounts so they can be queried as a list
"""
type Account @entity {
  id: Bytes!

  asERC20: ERC20Contract
  ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
  ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
  ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
  ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
  ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")

  asRollStaker: RollStakerContract
  PRVStakingBalances: [PRVStakingBalance!]! @derivedFrom(field: "account")
  PRVDepositEvent: [PRVDeposit!]! @derivedFrom(field: "receiver")
  PRVWithdrawEvent: [PRVWithdraw!]! @derivedFrom(field: "receiver")
  PRVExitEvent: [PRVExit!]! @derivedFrom(field: "receiver")

  asTokenLocker: TokenLockerContract
  ARVLocks: [ARVLock!]! @derivedFrom(field: "account")
  ARVDeposits: [ARVDeposit!]! @derivedFrom(field: "owner")
  ARVBoosts: [ARVBoostToMax!]! @derivedFrom(field: "owner")
  ARVIncreaseAmounts: [ARVIncreaseAmount!]! @derivedFrom(field: "owner")
  ARVIncreaseDurations: [ARVIncreaseDuration!]! @derivedFrom(field: "owner")
  ARVWithdraws: [ARVWithdrawal!]! @derivedFrom(field: "owner")
  ARVExits: [ARVEarlyExit!]! @derivedFrom(field: "owner")
  ARVEjects: [ARVEject!]! @derivedFrom(field: "owner")

  events: [Event!]! @derivedFrom(field: "emitter")
}

interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type ERC20Delegation implements IERC20Contract @entity {
  id: Bytes!
  asAccount: Account!
  name: String
  symbol: String
  decimals: Int!
  totalSupply: ERC20Balance!
  balances: [ERC20Balance!]! @derivedFrom(field: "contract")
  approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
  transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
  delegations: [DelegationStatus!]! @derivedFrom(field: "contract")
}

type DelegationStatus @entity {
  id: ID!
  contract: ERC20Delegation!
  delegate: Account
  delegator: Account!
  delegateChangedEvent: [ERC20DelegateChanged!]! @derivedFrom(field: "current")
}

type ERC20DelegateChanged implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: ERC20Delegation!
  delegator: Account!
  fromDelegate: Account!
  toDelegate: Account!
  current: DelegationStatus!
}

interface IERC20Contract {
  id: Bytes!
  asAccount: Account!
  name: String
  symbol: String
  decimals: Int!
  totalSupply: ERC20Balance!
  balances: [ERC20Balance!]!
  approvals: [ERC20Approval!]!
  transfers: [ERC20Transfer!]!
}

type ERC20Contract implements IERC20Contract @entity(immutable: true) {
  id: Bytes!
  asAccount: Account!
  name: String
  symbol: String
  decimals: Int!
  totalSupply: ERC20Balance!
  balances: [ERC20Balance!]! @derivedFrom(field: "contract")
  approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
  transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}

type ERC20Balance @entity {
  id: ID!
  contract: IERC20Contract!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}

type ERC20Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: IERC20Contract!
  from: Account
  fromBalance: ERC20Balance
  to: Account
  toBalance: ERC20Balance
  value: BigDecimal!
  valueExact: BigInt!
}

type ERC20Approval @entity {
  id: ID!
  contract: IERC20Contract!
  owner: Account!
  spender: Account!
  value: BigDecimal!
  valueExact: BigInt!
}

type RollStakerContract @entity(immutable: true) {
  id: Bytes!
  asAccount: Account!

  currentEpochId: Int
  stakingToken: ERC20Contract!
  epochBalances: [BigInt!]
  epochPendingBalance: BigInt

  balances: [PRVStakingBalance!]! @derivedFrom(field: "contract")
  deposits: [PRVDeposit!]! @derivedFrom(field: "contract")
  withdraws: [PRVWithdraw!]! @derivedFrom(field: "contract")
  exits: [PRVExit!]! @derivedFrom(field: "contract")
}

type PRVStakingBalance @entity {
  id: ID!
  contract: RollStakerContract!
  account: Account!
  value: BigDecimal!
  valueExact: BigInt!
  depositEvent: [PRVDeposit!]! @derivedFrom(field: "receiverBalance")
  withdrawEvent: [PRVWithdraw!]! @derivedFrom(field: "receiverBalance")
  exitEvent: [PRVExit!]! @derivedFrom(field: "receiverBalance")
}

type PRVDeposit implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: RollStakerContract!
  depositor: Account!
  receiver: Account!
  receiverBalance: PRVStakingBalance
  epochDepositedAt: Int!
  epochActiveFrom: Int!
  value: BigDecimal!
  valueExact: BigInt!
}

type PRVWithdraw implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: RollStakerContract!
  receiver: Account!
  receiverBalance: PRVStakingBalance!
  epoch: Int!
  value: BigDecimal!
  valueExact: BigInt!
}

type PRVExit implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: RollStakerContract!
  receiver: Account!
  receiverBalance: PRVStakingBalance!
  value: BigDecimal!
  valueExact: BigInt!
  epoch: Int!
}

type TokenLockerContract @entity(immutable: true) {
  id: Bytes!
  asAccount: Account!
  veToken: ERC20Contract!
  locks: [ARVLock!]! @derivedFrom(field: "contract")
  deposits: [ARVDeposit!]! @derivedFrom(field: "contract")
  boosts: [ARVBoostToMax!]! @derivedFrom(field: "contract")
  increaseAmounts: [ARVIncreaseAmount!]! @derivedFrom(field: "contract")
  increaseDurations: [ARVIncreaseDuration!]! @derivedFrom(field: "contract")
  withdraws: [ARVWithdrawal!]! @derivedFrom(field: "contract")
  exits: [ARVEarlyExit!]! @derivedFrom(field: "contract")
  ejects: [ARVEject!]! @derivedFrom(field: "contract")
}

"""
Represents the current amount, duration and timestamp of a lock,
along with associated events
"""
type ARVLock @entity {
  id: ID!
  contract: TokenLockerContract!
  account: Account
  auxoValue: BigDecimal!
  auxoValueExact: BigInt!
  arvValue: BigDecimal!
  arvValueExact: BigInt!
  lockedAt: BigInt!
  lockDuration: BigInt!
  deposits: [ARVDeposit!]! @derivedFrom(field: "lock")
  boosts: [ARVBoostToMax!]! @derivedFrom(field: "lock")
  increaseAmounts: [ARVIncreaseAmount!]! @derivedFrom(field: "lock")
  increaseDurations: [ARVIncreaseDuration!]! @derivedFrom(field: "lock")
  withdraws: [ARVWithdrawal!]! @derivedFrom(field: "lock")
  exits: [ARVEarlyExit!]! @derivedFrom(field: "lock")
  ejects: [ARVEject!]! @derivedFrom(field: "lock")
}

type ARVDeposit implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  owner: Account!
  contract: TokenLockerContract!
  amount: BigDecimal!
  amountExact: BigInt!
  lockDuration: BigInt!
  lock: ARVLock!
  arvMinted: BigDecimal!
  arvMintedExact: BigInt!
}

type ARVBoostToMax implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  contract: TokenLockerContract!
  owner: Account!
  amount: BigDecimal!
  amountExact: BigInt!
  lock: ARVLock!
  arvMinted: BigDecimal!
  arvMintedExact: BigInt!
}

type ARVIncreaseAmount implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  contract: TokenLockerContract!
  owner: Account!
  amount: BigDecimal!
  amountExact: BigInt!
  lock: ARVLock!
  arvMinted: BigDecimal!
  arvMintedExact: BigInt!
}

type ARVIncreaseDuration implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  contract: TokenLockerContract!
  owner: Account!
  amount: BigDecimal!
  amountExact: BigInt!
  lockDuration: BigInt!
  lockedAt: BigInt!
  lock: ARVLock!
  arvMinted: BigDecimal!
  arvMintedExact: BigInt!
}

type ARVWithdrawal implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  contract: TokenLockerContract!
  owner: Account!
  amount: BigDecimal!
  amountExact: BigInt!
  lock: ARVLock!
}

type ARVEarlyExit implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  contract: TokenLockerContract!
  owner: Account!
  amount: BigDecimal!
  amountExact: BigInt!
  lock: ARVLock!
}

type ARVEject implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  owner: Account!
  amount: BigDecimal!
  amountExact: BigInt!
  contract: TokenLockerContract
  lock: ARVLock!
}

